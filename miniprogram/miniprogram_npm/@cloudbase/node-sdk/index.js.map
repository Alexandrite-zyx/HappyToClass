{"version":3,"sources":["index.js","cloudbase.js","functions\\index.js","utils\\httpRequest.js","utils\\tracing.js","utils\\utils.js","const\\code.js","const\\symbol.js","utils\\request.js","utils\\requestHook.js","utils\\getWxCloudApiToken.js","..\\package.json","auth\\index.js","wx\\index.js","storage\\index.js","utils\\dbRequest.js","log\\index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA,ACHA;AHUA,ACHA,AFMA,AGTA,ACHA;AHUA,ACHA,AFMA,AGTA,ACHA;AHUA,ACHA,AFMA,AGTA,ACHA,ACHA;AJaA,ACHA,AFMA,AGTA,ACHA,ACHA;AJaA,ACHA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,AJYA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,AJYA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,AJYA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,ACHA,ALeA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,ACHA,ALeA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,ACHA,ALeA,AFMA,AGTA,ACHA,ACHA;AJaA,AKfA,ACHA,ALeA,AFMA,AGTA,AKfA,AJYA,ACHA;AJaA,AKfA,AJYA,AFMA,AGTA,AKfA,AJYA,ACHA;AJaA,AKfA,AJYA,AFMA,AGTA,AKfA,AJYA,ACHA;AJaA,AKfA,AJYA,AFMA,AGTA,AKfA,ACHA,ALeA,ACHA;AJaA,AKfA,AJYA,ACHA,AKfA,ACHA,ALeA,ACHA;AJaA,AKfA,AJYA,ACHA,AKfA,ACHA,ALeA,ACHA;AJaA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AJaA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AJaA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,AV8BA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,AV8BA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,AV8BA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,ACHA,AXiCA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,ACHA,AXiCA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,ACHA,AXiCA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA;AMjBA,ACHA,AXiCA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AQxBA,APqBA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AYpCA,AJYA,APqBA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AYpCA,AJYA,APqBA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AYpCA,AXiCA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AYpCA,ACHA,AZoCA,AKfA,ACHA,AJYA,AQxBA;AFOA,ACHA,AXiCA,AKfA,AJYA,AYpCA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,AYpCA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,ACHA,Ac1CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AKfA,AHSA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,ACHA,AZoCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,ACHA,AXiCA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA,AQxBA;AFOA,AV8BA,Ae7CA,AFMA,AXiCA,AENA;AMjBA,AV8BA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,Ae7CA,AFMA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AFOA,AavCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA,AXiCA;AWhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nconst cloudbase_1 = require(\"./cloudbase\");\r\nconst symbol_1 = require(\"./const/symbol\");\r\nconst tcb_admin_node_1 = __importDefault(require(\"tcb-admin-node\"));\r\nmodule.exports = {\r\n    init: (config) => {\r\n        if (config) {\r\n            const { _useFeature } = config;\r\n            if (_useFeature === false) {\r\n                // 设置用老实例\r\n                return tcb_admin_node_1.default.init(config);\r\n            }\r\n        }\r\n        return new cloudbase_1.CloudBase(config);\r\n    },\r\n    parseContext: (context) => {\r\n        // 校验context 是否正确\r\n        return cloudbase_1.CloudBase.parseContext(context);\r\n    },\r\n    /**\r\n     * 云函数下获取当前env\r\n     */\r\n    SYMBOL_CURRENT_ENV: symbol_1.SYMBOL_CURRENT_ENV\r\n};\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst database_1 = require(\"@cloudbase/database\");\r\nconst functions_1 = require(\"./functions\");\r\nconst auth_1 = require(\"./auth\");\r\nconst wx_1 = require(\"./wx\");\r\nconst storage_1 = require(\"./storage\");\r\nconst dbRequest_1 = require(\"./utils/dbRequest\");\r\nconst log_1 = require(\"./log\");\r\nconst code_1 = require(\"./const/code\");\r\nconst utils_1 = require(\"./utils/utils\");\r\nconst tcb_admin_node_1 = __importDefault(require(\"tcb-admin-node\"));\r\nconst GRAY_ENV_KEY = 'TCB_SDK_GRAY_0';\r\nclass CloudBase {\r\n    constructor(config) {\r\n        this.init(config);\r\n    }\r\n    static parseContext(context) {\r\n        if (typeof context !== 'object') {\r\n            throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_CONTEXT), { message: 'context 必须为对象类型' }));\r\n        }\r\n        let { memory_limit_in_mb, time_limit_in_ms, request_id, environ, function_version, namespace, function_name, environment } = context;\r\n        let parseResult = {};\r\n        try {\r\n            parseResult.memoryLimitInMb = memory_limit_in_mb;\r\n            parseResult.timeLimitIns = time_limit_in_ms;\r\n            parseResult.requestId = request_id;\r\n            parseResult.functionVersion = function_version;\r\n            parseResult.namespace = namespace;\r\n            parseResult.functionName = function_name;\r\n            // 存在environment 为新架构 上新字段 JSON序列化字符串\r\n            if (environment) {\r\n                parseResult.environment = JSON.parse(environment);\r\n                return parseResult;\r\n            }\r\n            // 不存在environment 则为老字段，老架构上存在bug，无法识别value含特殊字符(若允许特殊字符，影响解析，这里特殊处理)\r\n            const parseEnviron = environ.split(';');\r\n            let parseEnvironObj = {};\r\n            for (let i in parseEnviron) {\r\n                // value含分号影响切割，未找到= 均忽略\r\n                if (parseEnviron[i].indexOf('=') >= 0) {\r\n                    const equalIndex = parseEnviron[i].indexOf('=');\r\n                    const key = parseEnviron[i].slice(0, equalIndex);\r\n                    let value = parseEnviron[i].slice(equalIndex + 1);\r\n                    // value 含, 为数组\r\n                    if (value.indexOf(',') >= 0) {\r\n                        value = value.split(',');\r\n                    }\r\n                    parseEnvironObj[key] = value;\r\n                }\r\n            }\r\n            parseResult.environ = parseEnvironObj;\r\n        }\r\n        catch (err) {\r\n            throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_CONTEXT));\r\n        }\r\n        CloudBase.scfContext = parseResult;\r\n        return parseResult;\r\n    }\r\n    init(config = {}) {\r\n        let { secretId, secretKey, sessionToken, env, proxy, timeout, serviceUrl, version, headers = {}, credentials, isHttp, throwOnCode, _useFeature } = config;\r\n        if ((secretId && !secretKey) || (!secretId && secretKey)) {\r\n            throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'secretId and secretKey must be a pair' }));\r\n        }\r\n        const newConfig = {\r\n            secretId: secretId,\r\n            secretKey: secretKey,\r\n            sessionToken: sessionToken,\r\n            envName: env,\r\n            proxy,\r\n            isHttp,\r\n            headers: Object.assign({}, headers),\r\n            timeout: timeout || 15000,\r\n            serviceUrl,\r\n            credentials,\r\n            version,\r\n            throwOnCode: throwOnCode !== undefined ? throwOnCode : true,\r\n            _useFeature\r\n        };\r\n        this.config = newConfig;\r\n        // 设置旧实例\r\n        this.oldInstance = tcb_admin_node_1.default.init(config);\r\n    }\r\n    database(dbConfig = {}) {\r\n        database_1.Db.reqClass = dbRequest_1.DBRequest;\r\n        // 兼容方法预处理\r\n        if (Object.prototype.toString.call(dbConfig).slice(8, -1) !== 'Object') {\r\n            throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'dbConfig must be an object' }));\r\n        }\r\n        if (dbConfig && dbConfig.env) {\r\n            // env变量名转换\r\n            dbConfig.envName = dbConfig.env;\r\n            delete dbConfig.env;\r\n        }\r\n        return new database_1.Db(Object.assign(Object.assign(Object.assign({}, this.config), dbConfig), { _oldDbInstance: this.oldInstance.database(dbConfig) }));\r\n    }\r\n    /**\r\n     * 调用云函数\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    callFunction({ name, data }, opts) {\r\n        return this.preProcess(functions_1.callFunction)({ name, data }, opts);\r\n    }\r\n    auth() {\r\n        return this.preProcess(auth_1.auth)();\r\n    }\r\n    /**\r\n     * openapi调用\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    callWxOpenApi({ apiName, requestData }, opts) {\r\n        return this.preProcess(wx_1.callWxOpenApi)({ apiName, requestData }, opts);\r\n    }\r\n    /**\r\n     * wxpayapi调用\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    callWxPayApi({ apiName, requestData }, opts) {\r\n        return this.preProcess(wx_1.callWxPayApi)({ apiName, requestData }, opts);\r\n    }\r\n    /**\r\n     * 微信云调用\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    callCompatibleWxOpenApi({ apiName, requestData }, opts) {\r\n        return this.preProcess(wx_1.callCompatibleWxOpenApi)({ apiName, requestData }, opts);\r\n    }\r\n    /**\r\n     * 上传文件\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    uploadFile({ cloudPath, fileContent }, opts) {\r\n        return this.preProcess(storage_1.uploadFile)({ cloudPath, fileContent }, opts);\r\n    }\r\n    /**\r\n     * 删除文件\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    deleteFile({ fileList }, opts) {\r\n        return this.preProcess(storage_1.deleteFile)({ fileList }, opts);\r\n    }\r\n    /**\r\n     * 获取临时连接\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    getTempFileURL({ fileList }, opts) {\r\n        return this.preProcess(storage_1.getTempFileURL)({ fileList }, opts);\r\n    }\r\n    /**\r\n     * 下载文件\r\n     *\r\n     * @param params\r\n     * @param opts\r\n     */\r\n    downloadFile(params, opts) {\r\n        return this.preProcess(storage_1.downloadFile)(params, opts);\r\n    }\r\n    /**\r\n     * 获取上传元数据\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    getUploadMetadata({ cloudPath }, opts) {\r\n        return this.preProcess(storage_1.getUploadMetadata)({ cloudPath }, opts);\r\n    }\r\n    /**\r\n     * 获取logger\r\n     *\r\n     */\r\n    logger() {\r\n        if (!this.clsLogger) {\r\n            this.clsLogger = this.preProcess(log_1.logger)();\r\n        }\r\n        return this.clsLogger;\r\n    }\r\n    // 兼容处理旧sdk\r\n    preProcess(func) {\r\n        const self = this;\r\n        return function (...args) {\r\n            // 默认使用旧tcb实例对象\r\n            const oldInstance = self.oldInstance;\r\n            const functionName = func.name;\r\n            const oldFunc = oldInstance[functionName];\r\n            // 检查用户是否主动设置走新逻辑\r\n            if (self.config) {\r\n                const { _useFeature } = self.config;\r\n                if (_useFeature === true) {\r\n                    return func.call(self, self, ...args);\r\n                }\r\n            }\r\n            if (utils_1.checkIsGray()) {\r\n                return func.call(self, self, ...args);\r\n            }\r\n            return oldFunc.call(oldInstance, ...args);\r\n        };\r\n    }\r\n}\r\nexports.CloudBase = CloudBase;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst httpRequest_1 = __importDefault(require(\"../utils/httpRequest\"));\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst code_1 = require(\"../const/code\");\r\n/**\r\n * 调用云函数\r\n * @param {String} name  函数名\r\n * @param {Object} functionParam 函数参数\r\n * @return {Promise}\r\n */\r\nasync function callFunction(cloudbase, { name, data }, opts) {\r\n    let transformData;\r\n    try {\r\n        transformData = data ? JSON.stringify(data) : '';\r\n    }\r\n    catch (e) {\r\n        throw utils_1.E(Object.assign(Object.assign({}, e), { code: code_1.ERROR.INVALID_PARAM.code, message: '对象出现了循环引用' }));\r\n    }\r\n    if (!name) {\r\n        throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: '函数名不能为空' }));\r\n    }\r\n    const params = {\r\n        action: 'functions.invokeFunction',\r\n        function_name: name,\r\n        request_data: transformData\r\n    };\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        params,\r\n        method: 'post',\r\n        opts,\r\n        headers: Object.assign({ 'content-type': 'application/json' }, (process.env.TCB_ROUTE_KEY ? { 'X-Tcb-Route-Key': process.env.TCB_ROUTE_KEY } : {}))\r\n    }).then(res => {\r\n        if (res.code) {\r\n            return res;\r\n        }\r\n        // if (res.code) {\r\n        //     // return res\r\n        //     throw E({ ...res })\r\n        // } else {\r\n        let result;\r\n        try {\r\n            result = JSON.parse(res.data.response_data);\r\n        }\r\n        catch (e) {\r\n            result = res.data.response_data;\r\n        }\r\n        return {\r\n            result,\r\n            requestId: res.requestId\r\n        };\r\n    });\r\n}\r\nexports.callFunction = callFunction;\r\n","\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tracing_1 = require(\"./tracing\");\r\nconst utils = __importStar(require(\"./utils\"));\r\nconst code_1 = require(\"../const/code\");\r\nconst symbol_1 = require(\"../const/symbol\");\r\nconst cloudbase_1 = require(\"../cloudbase\");\r\nconst request_1 = __importDefault(require(\"./request\"));\r\nconst requestHook_1 = require(\"./requestHook\");\r\nconst getWxCloudApiToken_1 = require(\"./getWxCloudApiToken\");\r\nconst signature_nodejs_1 = require(\"@cloudbase/signature-nodejs\");\r\nconst url_1 = __importDefault(require(\"url\"));\r\nconst { version } = require('../../package.json');\r\nconst { E, second, processReturn, getServerInjectUrl } = utils;\r\nclass Request {\r\n    constructor(args) {\r\n        this.defaultEndPoint = 'tcb-admin.tencentcloudapi.com';\r\n        this.inScfHost = 'tcb-admin.tencentyun.com';\r\n        // private openApiHost: string = 'tcb-open.tencentcloudapi.com'\r\n        this.urlPath = '/admin';\r\n        this.defaultTimeout = 15000;\r\n        this.timestamp = new Date().valueOf();\r\n        this.tracingInfo = tracing_1.generateTracingInfo();\r\n        this.args = args;\r\n        this.config = args.config;\r\n    }\r\n    /**\r\n     *\r\n     * 接口action\r\n     */\r\n    getAction() {\r\n        const { params } = this.args;\r\n        const { action } = params;\r\n        return action;\r\n    }\r\n    /**\r\n     * 设置超时warning\r\n     */\r\n    setSlowRequeryWarning(action) {\r\n        const { seqId } = this.tracingInfo;\r\n        const warnStr = `Your current request ${action ||\r\n            ''} is longer than 3s, it may be due to the network or your query performance | [${seqId}]`;\r\n        // 暂针对数据库请求\r\n        const warnTimer = setTimeout(() => {\r\n            console.warn(warnStr);\r\n        }, 3000);\r\n        return warnTimer;\r\n    }\r\n    /**\r\n     * 构造params\r\n     */\r\n    getParams() {\r\n        const args = this.args;\r\n        const config = this.config;\r\n        const { eventId } = this.tracingInfo;\r\n        let params = Object.assign(Object.assign({}, args.params), { envName: config.envName, eventId, \r\n            // wxCloudApiToken: process.env.WX_API_TOKEN || '',\r\n            wxCloudApiToken: getWxCloudApiToken_1.getWxCloudApiToken(), \r\n            // 对应服务端 wxCloudSessionToken\r\n            tcb_sessionToken: process.env.TCB_SESSIONTOKEN || '', sessionToken: config.sessionToken, sdk_version: version // todo 可去掉该参数\r\n         });\r\n        // 取当前云函数环境时，替换为云函数下环境变量\r\n        if (params.envName === symbol_1.SYMBOL_CURRENT_ENV) {\r\n            params.envName = process.env.TCB_ENV || process.env.SCF_NAMESPACE;\r\n        }\r\n        // 过滤value undefined\r\n        utils.filterUndefined(params);\r\n        return params;\r\n    }\r\n    /**\r\n     *  构造请求项\r\n     */\r\n    makeReqOpts() {\r\n        // 校验密钥是否存在\r\n        this.validateSecretIdAndKey();\r\n        const config = this.config;\r\n        const args = this.args;\r\n        const url = this.getUrl();\r\n        const method = this.getMethod();\r\n        const params = this.getParams();\r\n        const opts = {\r\n            url,\r\n            method,\r\n            // 先取模块的timeout，没有则取sdk的timeout，还没有就使用默认值\r\n            // timeout: args.timeout || config.timeout || 15000,\r\n            timeout: this.getTimeout(),\r\n            // 优先取config，其次取模块，最后取默认\r\n            headers: this.getHeaders(),\r\n            proxy: config.proxy\r\n        };\r\n        if (config.forever === true) {\r\n            opts.forever = true;\r\n        }\r\n        if (args.method === 'post') {\r\n            if (args.isFormData) {\r\n                opts.formData = params;\r\n                opts.encoding = null;\r\n            }\r\n            else {\r\n                opts.body = params;\r\n                opts.json = true;\r\n            }\r\n        }\r\n        else {\r\n            opts.qs = params;\r\n        }\r\n        return opts;\r\n    }\r\n    /**\r\n     * 协议\r\n     */\r\n    getProtocol() {\r\n        return this.config.isHttp === true ? 'http' : 'https';\r\n    }\r\n    /**\r\n     * 请求方法\r\n     */\r\n    getMethod() {\r\n        return this.args.method || 'get';\r\n    }\r\n    /**\r\n     * 超时时间\r\n     */\r\n    getTimeout() {\r\n        const { opts = {} } = this.args;\r\n        // timeout优先级 自定义接口timeout > config配置timeout > 默认timeout\r\n        return opts.timeout || this.config.timeout || this.defaultTimeout;\r\n    }\r\n    /**\r\n     * 获取\r\n     */\r\n    /**\r\n     * 校验密钥和token是否存在\r\n     */\r\n    validateSecretIdAndKey() {\r\n        const isInSCF = utils.checkIsInScf();\r\n        const { secretId, secretKey } = this.config;\r\n        if (!secretId || !secretKey) {\r\n            // 用户init未传入密钥对，读process.env\r\n            const envSecretId = process.env.TENCENTCLOUD_SECRETID;\r\n            const envSecretKey = process.env.TENCENTCLOUD_SECRETKEY;\r\n            const sessionToken = process.env.TENCENTCLOUD_SESSIONTOKEN;\r\n            if (!envSecretId || !envSecretKey) {\r\n                if (isInSCF) {\r\n                    throw E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'missing authoration key, redeploy the function' }));\r\n                }\r\n                else {\r\n                    throw E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'missing secretId or secretKey of tencent cloud' }));\r\n                }\r\n            }\r\n            else {\r\n                this.config = Object.assign(Object.assign({}, this.config), { secretId: envSecretId, secretKey: envSecretKey, sessionToken: sessionToken });\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * 获取headers 此函数中设置authorization\r\n     */\r\n    getHeaders() {\r\n        const config = this.config;\r\n        const { secretId, secretKey } = config;\r\n        const args = this.args;\r\n        const method = this.getMethod();\r\n        const isInSCF = utils.checkIsInScf();\r\n        // Note: 云函数被调用时可能调用端未传递 SOURCE，TCB_SOURCE 可能为空\r\n        const TCB_SOURCE = process.env.TCB_SOURCE || '';\r\n        const SOURCE = isInSCF ? `${TCB_SOURCE},scf` : ',not_scf';\r\n        const url = this.getUrl();\r\n        // 默认\r\n        let requiredHeaders = {\r\n            'User-Agent': `tcb-node-sdk/${version}`,\r\n            'x-tcb-source': SOURCE,\r\n            'x-client-timestamp': this.timestamp,\r\n            'X-SDK-Version': `tcb-node-sdk/${version}`,\r\n            Host: url_1.default.parse(url).host\r\n        };\r\n        if (config.version) {\r\n            requiredHeaders['X-SDK-Version'] = config.version;\r\n        }\r\n        requiredHeaders = Object.assign(Object.assign(Object.assign({}, config.headers), args.headers), requiredHeaders);\r\n        const params = this.getParams();\r\n        const { authorization, timestamp } = signature_nodejs_1.sign({\r\n            secretId: secretId,\r\n            secretKey: secretKey,\r\n            method: method,\r\n            url: url,\r\n            params: params,\r\n            headers: requiredHeaders,\r\n            withSignedParams: true,\r\n            timestamp: second() - 1\r\n        });\r\n        requiredHeaders['Authorization'] = authorization;\r\n        requiredHeaders['X-Signature-Expires'] = 600;\r\n        requiredHeaders['X-Timestamp'] = timestamp;\r\n        return Object.assign({}, requiredHeaders);\r\n    }\r\n    /**\r\n     * 获取url\r\n     * @param action\r\n     */\r\n    getUrl() {\r\n        const protocol = this.getProtocol();\r\n        const isInSCF = utils.checkIsInScf();\r\n        const { eventId, seqId } = this.tracingInfo;\r\n        const { customApiUrl } = this.args;\r\n        const { serviceUrl } = this.config;\r\n        const serverInjectUrl = getServerInjectUrl();\r\n        const defaultUrl = isInSCF\r\n            ? `http://${this.inScfHost}${this.urlPath}`\r\n            : `${protocol}://${this.defaultEndPoint}${this.urlPath}`;\r\n        let url = serviceUrl || serverInjectUrl || customApiUrl || defaultUrl;\r\n        let urlQueryStr = `&eventId=${eventId}&seqId=${seqId}`;\r\n        const scfContext = cloudbase_1.CloudBase.scfContext;\r\n        if (scfContext) {\r\n            urlQueryStr = `&eventId=${eventId}&seqId=${seqId}&scfRequestId=${scfContext.request_id}`;\r\n        }\r\n        if (url.includes('?')) {\r\n            url = `${url}${urlQueryStr}`;\r\n        }\r\n        else {\r\n            url = `${url}?${urlQueryStr}`;\r\n        }\r\n        return url;\r\n    }\r\n}\r\nexports.Request = Request;\r\n// 业务逻辑都放在这里处理\r\nexports.default = async (args) => {\r\n    const req = new Request(args);\r\n    const reqOpts = req.makeReqOpts();\r\n    const config = args.config;\r\n    const action = req.getAction();\r\n    let reqHooks;\r\n    let warnTimer = null;\r\n    if (action === 'wx.openApi' || action === 'wx.wxPayApi') {\r\n        reqHooks = {\r\n            handleData: requestHook_1.handleWxOpenApiData\r\n        };\r\n    }\r\n    if (action.indexOf('database') >= 0) {\r\n        warnTimer = req.setSlowRequeryWarning(action);\r\n    }\r\n    try {\r\n        const res = await request_1.default(reqOpts, reqHooks);\r\n        // 检查res是否为return {code, message}回包\r\n        if (res.code) {\r\n            // 判断是否设置config._returnCodeByThrow = false\r\n            return processReturn(config.throwOnCode, res);\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        if (warnTimer) {\r\n            clearTimeout(warnTimer);\r\n        }\r\n    }\r\n};\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nlet seqNum = 0;\r\nfunction getSeqNum() {\r\n    return ++seqNum;\r\n}\r\nfunction generateEventId() {\r\n    return (Date.now().toString(16) +\r\n        '_' +\r\n        getSeqNum().toString(16));\r\n}\r\nexports.generateTracingInfo = () => {\r\n    const TCB_SEQID = process.env.TCB_SEQID || '';\r\n    const eventId = generateEventId();\r\n    const seqId = TCB_SEQID ? `${TCB_SEQID}-${eventId}` : eventId;\r\n    return { eventId, seqId };\r\n};\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst GRAY_ENV_KEY = 'TCB_SDK_GRAY_0';\r\nclass TcbError extends Error {\r\n    constructor(error) {\r\n        super(error.message);\r\n        this.code = error.code;\r\n        this.message = error.message;\r\n        this.requestId = error.requestId;\r\n    }\r\n}\r\nexports.TcbError = TcbError;\r\nexports.filterValue = function filterValue(o, value) {\r\n    for (let key in o) {\r\n        if (o[key] === value) {\r\n            delete o[key];\r\n        }\r\n    }\r\n};\r\nexports.filterUndefined = function (o) {\r\n    return exports.filterValue(o, undefined);\r\n};\r\n// export const filterNull = function(o) {\r\n//   return filterValue(o, null)\r\n// }\r\n// export const filterEmptyString = function(o) {\r\n//   return filterValue(o, '')\r\n// }\r\n// export const warpPromise = function warp(fn) {\r\n//   return function(...args) {\r\n//     // 确保返回 Promise 实例\r\n//     return new Promise((resolve, reject) => {\r\n//       try {\r\n//         return fn(...args)\r\n//           .then(resolve)\r\n//           .catch(reject)\r\n//       } catch (e) {\r\n//         reject(e)\r\n//       }\r\n//     })\r\n//   }\r\n// }\r\nexports.E = (errObj) => {\r\n    return new TcbError(errObj);\r\n};\r\nexports.isArray = arr => {\r\n    return arr instanceof Array;\r\n};\r\nexports.camSafeUrlEncode = str => {\r\n    return encodeURIComponent(str)\r\n        .replace(/!/g, '%21')\r\n        .replace(/'/g, '%27')\r\n        .replace(/\\(/g, '%28')\r\n        .replace(/\\)/g, '%29')\r\n        .replace(/\\*/g, '%2A');\r\n};\r\nexports.map = (obj, fn) => {\r\n    const o = exports.isArray(obj) ? [] : {};\r\n    for (let i in obj) {\r\n        if (obj.hasOwnProperty(i)) {\r\n            o[i] = fn(obj[i], i);\r\n        }\r\n    }\r\n    return o;\r\n};\r\nexports.clone = obj => {\r\n    return exports.map(obj, function (v) {\r\n        return typeof v === 'object' && v !== undefined && v !== null ? exports.clone(v) : v;\r\n    });\r\n};\r\nexports.checkIsInScf = () => {\r\n    return process.env.TENCENTCLOUD_RUNENV === 'SCF';\r\n};\r\nexports.delay = ms => {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\nfunction second() {\r\n    // istanbul ignore next\r\n    return Math.floor(new Date().getTime() / 1000);\r\n}\r\nexports.second = second;\r\nfunction processReturn(throwOnCode, res) {\r\n    if (throwOnCode === false) {\r\n        // 不抛报错，正常return，兼容旧逻辑\r\n        return res;\r\n    }\r\n    throw exports.E(Object.assign({}, res));\r\n}\r\nexports.processReturn = processReturn;\r\nfunction checkIsGray() {\r\n    const tcbContextConfig = getTcbContextConfig();\r\n    return tcbContextConfig[GRAY_ENV_KEY] === true;\r\n}\r\nexports.checkIsGray = checkIsGray;\r\nfunction getServerInjectUrl() {\r\n    const tcbContextConfig = getTcbContextConfig();\r\n    return tcbContextConfig['URL'] || '';\r\n}\r\nexports.getServerInjectUrl = getServerInjectUrl;\r\nfunction getTcbContextConfig() {\r\n    try {\r\n        if (process.env.TCB_CONTEXT_CNFG) {\r\n            // 检查约定环境变量字段是否存在\r\n            return JSON.parse(process.env.TCB_CONTEXT_CNFG);\r\n        }\r\n        return {};\r\n    }\r\n    catch (e) {\r\n        console.log('parse context error...');\r\n        return {};\r\n    }\r\n}\r\nexports.getTcbContextConfig = getTcbContextConfig;\r\nfunction getWxUrl(config) {\r\n    const protocal = config.isHttp === true ? 'http' : 'https';\r\n    let wxUrl = protocal + '://tcb-open.tencentcloudapi.com/admin';\r\n    if (exports.checkIsInScf()) {\r\n        wxUrl = 'http://tcb-open.tencentyun.com/admin';\r\n    }\r\n    return wxUrl;\r\n}\r\nexports.getWxUrl = getWxUrl;\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ERROR = {\r\n    INVALID_PARAM: {\r\n        code: 'INVALID_PARAM',\r\n        message: 'invalid param'\r\n    },\r\n    SYS_ERR: {\r\n        code: 'SYS_ERR',\r\n        message: 'system error'\r\n    },\r\n    STORAGE_REQUEST_FAIL: {\r\n        code: 'STORAGE_REQUEST_FAIL',\r\n        message: 'storage request fail'\r\n    },\r\n    STORAGE_FILE_NONEXIST: {\r\n        code: 'STORAGE_FILE_NONEXIST',\r\n        message: 'storage file not exist'\r\n    },\r\n    TCB_CLS_UNOPEN: {\r\n        code: 'TCB_CLS_UNOPEN',\r\n        message: '需要先开通日志检索功能'\r\n    },\r\n    INVALID_CONTEXT: {\r\n        code: 'INVALID_CONTEXT',\r\n        message: '无效的context对象，请使用 云函数入口的context参数'\r\n    }\r\n};\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SYMBOL_CURRENT_ENV = Symbol.for(\"SYMBOL_CURRENT_ENV\");\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst http_1 = __importDefault(require(\"http\"));\r\nconst request_1 = __importDefault(require(\"request\"));\r\nconst utils_1 = require(\"./utils\");\r\nexports.default = (opts, reqHooks) => {\r\n    return new Promise((resolve, reject) => {\r\n        request_1.default(opts, function (err, response, body) {\r\n            if (err) {\r\n                return reject(err);\r\n            }\r\n            if (response.statusCode === 200) {\r\n                let res;\r\n                try {\r\n                    res = typeof body === 'string' ? JSON.parse(body) : body;\r\n                    // wx.openApi 调用时，需用content-type区分buffer or JSON\r\n                    if (reqHooks) {\r\n                        const { handleData } = reqHooks;\r\n                        if (handleData) {\r\n                            res = handleData(res, err, response, body);\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    res = body;\r\n                }\r\n                return resolve(res);\r\n            }\r\n            else {\r\n                const e = utils_1.E({\r\n                    code: response.statusCode,\r\n                    message: ` ${response.statusCode} ${http_1.default.STATUS_CODES[response.statusCode]} | [url: ${opts.url}]`\r\n                });\r\n                reject(e);\r\n            }\r\n        });\r\n    });\r\n};\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * 处理wxopenapi返回\r\n *\r\n * @param err\r\n * @param response\r\n * @param body\r\n */\r\nexports.handleWxOpenApiData = (res, err, response, body) => {\r\n    // wx.openApi 调用时，需用content-type区分buffer or JSON\r\n    const { headers } = response;\r\n    let transformRes = res;\r\n    if (headers['content-type'] === 'application/json; charset=utf-8') {\r\n        transformRes = JSON.parse(transformRes.toString()); // JSON错误时buffer转JSON\r\n    }\r\n    return transformRes;\r\n};\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// 由定时触发器触发时（TRIGGER_SRC=timer）：优先使用 WX_TRIGGER_API_TOKEN_V0，不存在的话，为了兼容兼容旧的开发者工具，也是使用 WX_API_TOKEN\r\n// 非定时触发器触发时（TRIGGER_SRC!=timer）: 使用 WX_API_TOKEN\r\nfunction getWxCloudApiToken() {\r\n    if (process.env.TRIGGER_SRC === 'timer') {\r\n        return process.env.WX_TRIGGER_API_TOKEN_V0 || process.env.WX_API_TOKEN || '';\r\n    }\r\n    else {\r\n        return process.env.WX_API_TOKEN || '';\r\n    }\r\n}\r\nexports.getWxCloudApiToken = getWxCloudApiToken;\r\n","module.exports = {\r\n  \"_from\": \"@cloudbase/node-sdk@2.0.0-beta.6\",\r\n  \"_id\": \"@cloudbase/node-sdk@2.0.0-beta.6\",\r\n  \"_inBundle\": false,\r\n  \"_integrity\": \"sha512-u2EdndZKCXzsNqJu6a67DUvmMu+znVTcLep8YkpAcOQBS0tCLjCEdIqIO5LuPQ4bG+zWXAbQHY6ysnwSqzAcEg==\",\r\n  \"_location\": \"/@cloudbase/node-sdk\",\r\n  \"_phantomChildren\": {},\r\n  \"_requested\": {\r\n    \"type\": \"version\",\r\n    \"registry\": true,\r\n    \"raw\": \"@cloudbase/node-sdk@2.0.0-beta.6\",\r\n    \"name\": \"@cloudbase/node-sdk\",\r\n    \"escapedName\": \"@cloudbase%2fnode-sdk\",\r\n    \"scope\": \"@cloudbase\",\r\n    \"rawSpec\": \"2.0.0-beta.6\",\r\n    \"saveSpec\": null,\r\n    \"fetchSpec\": \"2.0.0-beta.6\"\r\n  },\r\n  \"_requiredBy\": [\r\n    \"/wx-server-sdk\"\r\n  ],\r\n  \"_resolved\": \"https://registry.npmjs.org/@cloudbase/node-sdk/-/node-sdk-2.0.0-beta.6.tgz\",\r\n  \"_shasum\": \"ca51f302167bd23ab508eadfbc915fe33bb43910\",\r\n  \"_spec\": \"@cloudbase/node-sdk@2.0.0-beta.6\",\r\n  \"_where\": \"C:\\\\Users\\\\a\\\\learngit\\\\HappyToClass\\\\miniprogram\\\\node_modules\\\\wx-server-sdk\",\r\n  \"author\": {\r\n    \"name\": \"lukejyhuang\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/TencentCloudBase/node-sdk/issues\"\r\n  },\r\n  \"bundleDependencies\": false,\r\n  \"dependencies\": {\r\n    \"@cloudbase/database\": \"1.0.0-beta.2\",\r\n    \"@cloudbase/signature-nodejs\": \"1.0.0-beta.0\",\r\n    \"is-regex\": \"^1.0.4\",\r\n    \"jsonwebtoken\": \"^8.5.1\",\r\n    \"lodash.merge\": \"^4.6.1\",\r\n    \"request\": \"^2.87.0\",\r\n    \"request-promise\": \"^4.2.5\",\r\n    \"tcb-admin-node\": \"1.23.0\",\r\n    \"xml2js\": \"^0.4.19\"\r\n  },\r\n  \"deprecated\": false,\r\n  \"description\": \"tencent cloud base server sdk for node.js\",\r\n  \"devDependencies\": {\r\n    \"@types/jest\": \"^23.1.4\",\r\n    \"@types/mocha\": \"^5.2.4\",\r\n    \"@types/node\": \"^10.12.12\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^2.16.0\",\r\n    \"@typescript-eslint/parser\": \"^2.16.0\",\r\n    \"babel-eslint\": \"^10.0.3\",\r\n    \"coveralls\": \"^3.0.9\",\r\n    \"dumper.js\": \"^1.3.0\",\r\n    \"eslint\": \"^6.8.0\",\r\n    \"eslint-config-alloy\": \"^3.5.0\",\r\n    \"eslint-plugin-prettier\": \"^3.1.2\",\r\n    \"husky\": \"^3.1.0\",\r\n    \"jest\": \"^23.3.0\",\r\n    \"lint-staged\": \"^9.2.5\",\r\n    \"mocha\": \"^5.2.0\",\r\n    \"power-assert\": \"^1.5.0\",\r\n    \"prettier\": \"^1.19.1\",\r\n    \"ts-jest\": \"^23.10.4\",\r\n    \"tslib\": \"^1.7.1\",\r\n    \"typescript\": \"^3.7.4\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=8.6.0\"\r\n  },\r\n  \"homepage\": \"https://github.com/TencentCloudBase/node-sdk#readme\",\r\n  \"husky\": {\r\n    \"hooks\": {\r\n      \"pre-commit\": \"npm run tsc && git add . && lint-staged\"\r\n    }\r\n  },\r\n  \"keywords\": [\r\n    \"node sdk\"\r\n  ],\r\n  \"license\": \"MIT\",\r\n  \"lint-staged\": {\r\n    \"*.ts\": [\r\n      \"eslint --fix\",\r\n      \"git add\"\r\n    ]\r\n  },\r\n  \"main\": \"lib/index.js\",\r\n  \"name\": \"@cloudbase/node-sdk\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/TencentCloudBase/node-sdk.git\"\r\n  },\r\n  \"scripts\": {\r\n    \"coverage\": \"jest --detectOpenHandles --coverage\",\r\n    \"coveralls\": \"cat ./coverage/lcov.info | coveralls\",\r\n    \"eslint\": \"eslint \\\"./**/*.ts\\\"\",\r\n    \"eslint-fix\": \"eslint --fix \\\"./**/*.ts\\\"\",\r\n    \"test\": \"jest  --detectOpenHandles --coverage --verbose\",\r\n    \"tsc\": \"tsc -p tsconfig.json\",\r\n    \"tsc:w\": \"tsc -p tsconfig.json -w\",\r\n    \"tstest\": \"mocha --timeout 5000 --require espower-typescript/guess test/**/*.test.ts\"\r\n  },\r\n  \"typings\": \"types/index.d.ts\",\r\n  \"version\": \"2.0.0-beta.6\"\r\n}\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst jsonwebtoken_1 = __importDefault(require(\"jsonwebtoken\"));\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst code_1 = require(\"../const/code\");\r\nconst cloudbase_1 = require(\"../cloudbase\");\r\nconst symbol_1 = require(\"../const/symbol\");\r\nconst checkCustomUserIdRegex = /^[a-zA-Z0-9_\\-#@~=*(){}[\\]:.,<>+]{4,32}$/;\r\nfunction validateUid(uid) {\r\n    if (typeof uid !== 'string') {\r\n        // console.log('debug:', { ...ERROR.INVALID_PARAM, message: 'uid must be a string' })\r\n        throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'uid must be a string' }));\r\n    }\r\n    if (!checkCustomUserIdRegex.test(uid)) {\r\n        throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: `Invalid uid: \"${uid}\"` }));\r\n    }\r\n}\r\nfunction auth(cloudbase) {\r\n    return {\r\n        getUserInfo() {\r\n            const openId = process.env.WX_OPENID || '';\r\n            const appId = process.env.WX_APPID || '';\r\n            const uid = process.env.TCB_UUID || '';\r\n            const customUserId = process.env.TCB_CUSTOM_USER_ID || '';\r\n            const isAnonymous = process.env.TCB_ISANONYMOUS_USER === 'true' ? true : false;\r\n            return {\r\n                openId,\r\n                appId,\r\n                uid,\r\n                customUserId,\r\n                isAnonymous\r\n            };\r\n        },\r\n        async getAuthContext(context) {\r\n            const { environment, environ } = cloudbase_1.CloudBase.parseContext(context);\r\n            const env = environment || environ || {};\r\n            const { TCB_UUID, LOGINTYPE } = env;\r\n            const res = {\r\n                uid: TCB_UUID,\r\n                loginType: LOGINTYPE\r\n            };\r\n            if (LOGINTYPE === 'QQ-MINI') {\r\n                const { QQ_OPENID, QQ_APPID } = env;\r\n                res.appId = QQ_APPID;\r\n                res.openId = QQ_OPENID;\r\n            }\r\n            return res;\r\n        },\r\n        getClientIP() {\r\n            return process.env.TCB_SOURCE_IP || '';\r\n        },\r\n        createTicket: (uid, options = {}) => {\r\n            validateUid(uid);\r\n            const timestamp = new Date().getTime();\r\n            const { credentials } = cloudbase.config;\r\n            let { envName } = cloudbase.config;\r\n            if (!envName) {\r\n                throw new Error('no env in config');\r\n            }\r\n            // 使用symbol时替换为环境变量内的env\r\n            if (envName === symbol_1.SYMBOL_CURRENT_ENV) {\r\n                envName = process.env.TCB_ENV || process.env.SCF_NAMESPACE;\r\n            }\r\n            const { refresh = 3600 * 1000, expire = timestamp + 7 * 24 * 60 * 60 * 1000 } = options;\r\n            const token = jsonwebtoken_1.default.sign({\r\n                alg: 'RS256',\r\n                env: envName,\r\n                iat: timestamp,\r\n                exp: timestamp + 10 * 60 * 1000,\r\n                uid,\r\n                refresh,\r\n                expire\r\n            }, credentials.private_key, { algorithm: 'RS256' });\r\n            return credentials.private_key_id + '/@@/' + token;\r\n        }\r\n    };\r\n}\r\nexports.auth = auth;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst httpRequest_1 = __importDefault(require(\"../utils/httpRequest\"));\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst code_1 = require(\"../const/code\");\r\nasync function callWxOpenApi(cloudbase, { apiName, requestData }, opts) {\r\n    let transformRequestData;\r\n    try {\r\n        transformRequestData = requestData ? JSON.stringify(requestData) : '';\r\n    }\r\n    catch (e) {\r\n        throw utils_1.E(Object.assign(Object.assign({}, e), { code: code_1.ERROR.INVALID_PARAM.code, message: '对象出现了循环引用' }));\r\n    }\r\n    const params = {\r\n        action: 'wx.api',\r\n        apiName,\r\n        requestData: transformRequestData\r\n    };\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        params,\r\n        method: 'post',\r\n        opts,\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        customApiUrl: utils_1.getWxUrl(cloudbase.config)\r\n    }).then(res => {\r\n        if (res.code) {\r\n            return res;\r\n        }\r\n        //     throw E({ ...res })\r\n        // } else {\r\n        let result;\r\n        try {\r\n            result = JSON.parse(res.data.responseData);\r\n        }\r\n        catch (e) {\r\n            result = res.data.responseData;\r\n        }\r\n        return {\r\n            result,\r\n            requestId: res.requestId\r\n        };\r\n        // }\r\n    });\r\n}\r\nexports.callWxOpenApi = callWxOpenApi;\r\n/**\r\n * 调用wxopenAPi\r\n * @param {String} apiName  接口名\r\n * @param {Buffer} requestData\r\n * @return {Promise} 正常内容为buffer，报错为json {code:'', message:'', resquestId:''}\r\n */\r\nasync function callCompatibleWxOpenApi(cloudbase, { apiName, requestData }, opts) {\r\n    const params = {\r\n        action: 'wx.openApi',\r\n        apiName,\r\n        requestData\r\n    };\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        method: 'post',\r\n        headers: { 'content-type': 'multipart/form-data' },\r\n        params,\r\n        isFormData: true,\r\n        customApiUrl: utils_1.getWxUrl(cloudbase.config),\r\n        opts\r\n    }).then(res => res);\r\n}\r\nexports.callCompatibleWxOpenApi = callCompatibleWxOpenApi;\r\n/**\r\n * wx.wxPayApi 微信支付用\r\n * @param {String} apiName  接口名\r\n * @param {Buffer} requestData\r\n * @return {Promise} 正常内容为buffer，报错为json {code:'', message:'', resquestId:''}\r\n */\r\nasync function callWxPayApi(cloudbase, { apiName, requestData }, opts) {\r\n    const params = {\r\n        action: 'wx.wxPayApi',\r\n        apiName,\r\n        requestData\r\n    };\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        method: 'post',\r\n        headers: { 'content-type': 'multipart/form-data' },\r\n        params,\r\n        isFormData: true,\r\n        customApiUrl: utils_1.getWxUrl(cloudbase.config),\r\n        opts\r\n    });\r\n}\r\nexports.callWxPayApi = callWxPayApi;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst request_1 = __importDefault(require(\"request\"));\r\nconst fs_1 = __importDefault(require(\"fs\"));\r\nconst httpRequest_1 = __importDefault(require(\"../utils/httpRequest\"));\r\nconst xml2js_1 = require(\"xml2js\");\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst code_1 = require(\"../const/code\");\r\nasync function parseXML(str) {\r\n    return new Promise((resolve, reject) => {\r\n        xml2js_1.parseString(str, (err, result) => {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.parseXML = parseXML;\r\n/*\r\n * 上传文件\r\n * @param {string} cloudPath 上传后的文件路径\r\n * @param {fs.ReadStream} fileContent  上传文件的二进制流\r\n */\r\nasync function uploadFile(cloudbase, { cloudPath, fileContent }, opts) {\r\n    const { data: { url, token, authorization, fileId, cosFileId } } = await getUploadMetadata(cloudbase, { cloudPath }, opts);\r\n    const formData = {\r\n        Signature: authorization,\r\n        'x-cos-security-token': token,\r\n        'x-cos-meta-fileid': cosFileId,\r\n        key: cloudPath,\r\n        file: fileContent\r\n    };\r\n    let body = await new Promise((resolve, reject) => {\r\n        request_1.default({ url, formData: formData, method: 'post' }, function (err, res, body) {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            else {\r\n                resolve(body);\r\n            }\r\n        });\r\n    });\r\n    body = await parseXML(body);\r\n    if (body && body.Error) {\r\n        const { Code: [code], Message: [message] } = body.Error;\r\n        if (code === 'SignatureDoesNotMatch') {\r\n            return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.SYS_ERR), { message }));\r\n        }\r\n        return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.STORAGE_REQUEST_FAIL), { message }));\r\n    }\r\n    return {\r\n        fileID: fileId\r\n    };\r\n}\r\nexports.uploadFile = uploadFile;\r\n/**\r\n * 删除文件\r\n * @param {Array.<string>} fileList 文件id数组\r\n */\r\nasync function deleteFile(cloudbase, { fileList }, opts) {\r\n    if (!fileList || !Array.isArray(fileList)) {\r\n        return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'fileList必须是非空的数组' }));\r\n    }\r\n    for (let file of fileList) {\r\n        if (!file || typeof file !== 'string') {\r\n            return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'fileList的元素必须是非空的字符串' }));\r\n        }\r\n    }\r\n    let params = {\r\n        action: 'storage.batchDeleteFile',\r\n        fileid_list: fileList\r\n    };\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        params,\r\n        method: 'post',\r\n        opts,\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }\r\n    }).then(res => {\r\n        if (res.code) {\r\n            return res;\r\n        }\r\n        //     throw E({ ...res })\r\n        // } else {\r\n        return {\r\n            fileList: res.data.delete_list,\r\n            requestId: res.requestId\r\n        };\r\n        // }\r\n    });\r\n}\r\nexports.deleteFile = deleteFile;\r\n/**\r\n * 获取文件下载链接\r\n * @param {Array.<Object>} fileList\r\n */\r\nasync function getTempFileURL(cloudbase, { fileList }, opts) {\r\n    if (!fileList || !Array.isArray(fileList)) {\r\n        return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'fileList必须是非空的数组' }));\r\n    }\r\n    let file_list = [];\r\n    for (let file of fileList) {\r\n        if (typeof file === 'object') {\r\n            if (!file.hasOwnProperty('fileID') || !file.hasOwnProperty('maxAge')) {\r\n                return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'fileList的元素如果是对象，必须是包含fileID和maxAge的对象' }));\r\n            }\r\n            file_list.push({\r\n                fileid: file.fileID,\r\n                max_age: file.maxAge\r\n            });\r\n        }\r\n        else if (typeof file === 'string') {\r\n            file_list.push({\r\n                fileid: file\r\n            });\r\n        }\r\n        else {\r\n            return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'fileList的元素如果不是对象，则必须是字符串' }));\r\n        }\r\n    }\r\n    let params = {\r\n        action: 'storage.batchGetDownloadUrl',\r\n        file_list\r\n    };\r\n    // console.log(params);\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        params,\r\n        method: 'post',\r\n        opts,\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }\r\n    }).then(res => {\r\n        if (res.code) {\r\n            return res;\r\n        }\r\n        // if (res.code) {\r\n        //     throw E({ ...res })\r\n        // } else {\r\n        return {\r\n            fileList: res.data.download_list,\r\n            requestId: res.requestId\r\n        };\r\n        // }\r\n    });\r\n}\r\nexports.getTempFileURL = getTempFileURL;\r\nasync function downloadFile(cloudbase, params, opts) {\r\n    let tmpUrl;\r\n    const { fileID, tempFilePath } = params;\r\n    const tmpUrlRes = await getTempFileURL(cloudbase, {\r\n        fileList: [\r\n            {\r\n                fileID,\r\n                maxAge: 600\r\n            }\r\n        ]\r\n    }, opts);\r\n    // console.log(tmpUrlRes);\r\n    const res = tmpUrlRes.fileList[0];\r\n    if (res.code !== 'SUCCESS') {\r\n        return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign({}, res));\r\n    }\r\n    tmpUrl = res.tempFileURL;\r\n    tmpUrl = encodeURI(tmpUrl);\r\n    let req = request_1.default({\r\n        url: tmpUrl,\r\n        encoding: null,\r\n        proxy: cloudbase.config.proxy\r\n    });\r\n    return new Promise((resolve, reject) => {\r\n        let fileContent = Buffer.alloc(0);\r\n        req.on('response', function (response) {\r\n            if (response && Number(response.statusCode) === 200) {\r\n                if (tempFilePath) {\r\n                    response.pipe(fs_1.default.createWriteStream(tempFilePath));\r\n                }\r\n                else {\r\n                    response.on('data', data => {\r\n                        fileContent = Buffer.concat([fileContent, data]);\r\n                    });\r\n                }\r\n                response.on('end', () => {\r\n                    resolve({\r\n                        fileContent: tempFilePath ? undefined : fileContent,\r\n                        message: '文件下载完成'\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                reject(response);\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.downloadFile = downloadFile;\r\nasync function getUploadMetadata(cloudbase, { cloudPath }, opts) {\r\n    let params = {\r\n        action: 'storage.getUploadMetadata',\r\n        path: cloudPath\r\n    };\r\n    const res = await httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        params,\r\n        method: 'post',\r\n        opts,\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }\r\n    });\r\n    // if (res.code) {\r\n    //     throw E({\r\n    //         ...ERROR.STORAGE_REQUEST_FAIL,\r\n    //         message: 'get upload metadata failed: ' + res.code\r\n    //     })\r\n    // } else {\r\n    return res;\r\n    // }\r\n}\r\nexports.getUploadMetadata = getUploadMetadata;\r\nasync function getFileAuthority(cloudbase, { fileList }) {\r\n    if (!Array.isArray(fileList)) {\r\n        throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: '[node-sdk] getCosFileAuthority fileList must be a array' }));\r\n    }\r\n    if (fileList.some(file => {\r\n        if (!file || !file.path) {\r\n            return true;\r\n        }\r\n        if (['READ', 'WRITE', 'READWRITE'].indexOf(file.type) === -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    })) {\r\n        throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: '[node-sdk] getCosFileAuthority fileList param error' }));\r\n    }\r\n    const userInfo = this.auth().getUserInfo();\r\n    const { openId, uid } = userInfo;\r\n    if (!openId && !uid) {\r\n        throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: '[node-sdk] admin do not need getCosFileAuthority.' }));\r\n    }\r\n    let params = {\r\n        action: 'storage.getFileAuthority',\r\n        openId,\r\n        uid,\r\n        loginType: process.env.LOGINTYPE,\r\n        fileList\r\n    };\r\n    const res = await httpRequest_1.default({\r\n        config: this.config,\r\n        params,\r\n        method: 'post',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }\r\n    });\r\n    if (res.code) {\r\n        throw utils_1.E(Object.assign(Object.assign({}, res), { message: '[node-sdk] getCosFileAuthority failed: ' + res.code }));\r\n    }\r\n    else {\r\n        return res;\r\n    }\r\n}\r\nexports.getFileAuthority = getFileAuthority;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst httpRequest_1 = __importDefault(require(\"./httpRequest\"));\r\n/**\r\n * 数据库模块的通用请求方法\r\n *\r\n * @author haroldhu\r\n * @internal\r\n */\r\nclass DBRequest {\r\n    /**\r\n     * 初始化\r\n     *\r\n     * @internal\r\n     * @param config\r\n     */\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n    /**\r\n     * 发送请求\r\n     *\r\n     * @param dbParams   - 数据库请求参数\r\n     * @param opts  - 可选配置项\r\n     */\r\n    async send(api, data, opts) {\r\n        const params = Object.assign(Object.assign({}, data), { action: api });\r\n        return httpRequest_1.default({\r\n            config: this.config,\r\n            params,\r\n            method: 'post',\r\n            opts,\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.DBRequest = DBRequest;\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst code_1 = require(\"../const/code\");\r\n/**\r\n *\r\n *\r\n * @class Log\r\n */\r\nclass Log {\r\n    constructor() {\r\n        this.src = 'app';\r\n        this.isSupportClsReport = true;\r\n        if (`${process.env._SCF_TCB_LOG}` !== '1') {\r\n            this.isSupportClsReport = false;\r\n        }\r\n        else if (!console.__baseLog__) {\r\n            this.isSupportClsReport = false;\r\n        }\r\n        if (!this.isSupportClsReport) {\r\n            // 当前非tcb scf环境  log功能会退化为console\r\n            console.warn('请检查您是否在本地环境 或者 未开通高级日志功能，当前环境下无法上报cls日志，默认使用console');\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * @param {*} logMsg\r\n     * @param {*} logLevel\r\n     * @returns\r\n     * @memberof Log\r\n     */\r\n    transformMsg(logMsg) {\r\n        // 目前logMsg只支持字符串value且不支持多级, 加一层转换处理\r\n        let realMsg = {};\r\n        realMsg = Object.assign(Object.assign({}, realMsg), logMsg);\r\n        return realMsg;\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * @param {*} logMsg\r\n     * @param {*} logLevel\r\n     * @memberof Log\r\n     */\r\n    baseLog(logMsg, logLevel) {\r\n        // 判断当前是否属于tcb scf环境\r\n        if (Object.prototype.toString.call(logMsg).slice(8, -1) !== 'Object') {\r\n            throw utils_1.E(Object.assign(Object.assign({}, code_1.ERROR.INVALID_PARAM), { message: 'log msg must be an object' }));\r\n        }\r\n        const msgContent = this.transformMsg(logMsg);\r\n        if (this.isSupportClsReport) {\r\n            ;\r\n            console.__baseLog__(msgContent, logLevel);\r\n        }\r\n        else {\r\n            if (console[logLevel]) {\r\n                console[logLevel](msgContent);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * @param {*} logMsg\r\n     * @memberof Log\r\n     */\r\n    log(logMsg) {\r\n        this.baseLog(logMsg, 'log');\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * @param {*} logMsg\r\n     * @memberof Log\r\n     */\r\n    info(logMsg) {\r\n        this.baseLog(logMsg, 'info');\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * @param {*} logMsg\r\n     * @memberof Log\r\n     */\r\n    error(logMsg) {\r\n        this.baseLog(logMsg, 'error');\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * @param {*} logMsg\r\n     * @memberof Log\r\n     */\r\n    warn(logMsg) {\r\n        this.baseLog(logMsg, 'warn');\r\n    }\r\n}\r\nexports.Log = Log;\r\nfunction logger() {\r\n    return new Log();\r\n}\r\nexports.logger = logger;\r\n"]}